{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagarTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["//import { resolve } from \"url\";\r\nimport {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService(); \r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Nao foi possivel obter as negociacoes da semana');\r\n                });   \r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Nao foi possivel obter as negociacoes da semana anterior');\r\n                });\r\n        });    \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Nao foi possivel obter as negociacoes da semana retrasada');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Nao foi possivel adicionar a negociacao')\r\n            });    \r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Nao foi possivel adicionar a negociacao')\r\n            }); \r\n    }\r\n\r\n    apaga() {\r\n\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagarTodos())\r\n            .then(() => 'Negociacoes apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Nao foi possivel apagar as negociacoes')\r\n            })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n        )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Nao foi possivel buscar as negociacoes para importar');\r\n            })\r\n    }\r\n}"]}